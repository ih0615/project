package shop.kkyochon.banban.member.controller;

import java.io.IOException;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import shop.kkyochon.banban.home.action.HomeAction;
import shop.kkyochon.banban.member.action.RegisterMemberFormAction;
import shop.kkyochon.banban.member.action.RegisterMemberProcAction;
import shop.kkyochon.banban.member.action.UpdateMemberFormAction;
import shop.kkyochon.banban.member.action.UpdateMemberProcAction;
import shop.kkyochon.banban.member.action.DetailMemberAction;
import shop.kkyochon.banban.member.action.FindIdFormAction;
import shop.kkyochon.banban.member.action.FindIdProcAction;
import shop.kkyochon.banban.member.action.FindPwFormAction;
import shop.kkyochon.banban.member.action.FindPwProcAction;
import shop.kkyochon.banban.member.action.LoginFormAction;
import shop.kkyochon.banban.member.action.LoginProcAction;
import shop.kkyochon.banban.member.action.LogoutAction;
import shop.kkyochon.banban.member.action.MyPageAction;
import shop.kkyochon.banban.member.action.NaverLoginProcAction;
import shop.kkyochon.common.Action;
import shop.kkyochon.common.ActionForward;

@WebServlet("/member/*")
public class MemberController extends HttpServlet {
	private static final long serialVersionUID = 1L;

	protected void doProcess(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		request.setCharacterEncoding("UTF-8");
		String requestURI = request.getRequestURI();
		String contextPath = request.getContextPath();
		String command = requestURI.substring(contextPath.length()).replaceAll("/member", "");

		ActionForward forward = null;

		if (command.equals("/loginForm")) {
			Action action = new LoginFormAction();
			try {
				forward = action.execute(request, response);
			} catch (Exception e) {
				e.printStackTrace();
			}
		} else if (command.equals("/loginProc")) {
			Action action = new LoginProcAction();
			try {
				forward = action.execute(request, response);
			} catch (Exception e) {
				e.printStackTrace();
			}
		} else if (command.equals("/naverLoginProc")) {
			Action action = new NaverLoginProcAction();
			try {
				forward = action.execute(request, response);
			} catch (Exception e) {
				e.printStackTrace();
			}
		} else if (command.equals("/findIdForm")) {
			Action action = new FindIdFormAction();
			try {
				forward = action.execute(request, response);
			} catch (Exception e) {
				e.printStackTrace();
			}
		} else if (command.equals("/findIdProc")) {
			Action action = new FindIdProcAction();
			try {
				forward = action.execute(request, response);
			} catch (Exception e) {
				e.printStackTrace();
			}
		} else if (command.equals("/findPwForm")) {
			Action action = new FindPwFormAction();
			try {
				forward = action.execute(request, response);
			} catch (Exception e) {
				e.printStackTrace();
			}
		} else if (command.equals("/findPwProc")) {
			Action action = new FindPwProcAction();
			try {
				forward = action.execute(request, response);
			} catch (Exception e) {
				e.printStackTrace();
			}
		} else if (command.equals("/registerMemberForm")) {
			Action action = new RegisterMemberFormAction();
			try {
				forward = action.execute(request, response);
			} catch (Exception e) {
				e.printStackTrace();
			}
		} else if (command.equals("/registerMemberProc")) {
			Action action = new RegisterMemberProcAction();
			try {
				forward = action.execute(request, response);
			} catch (Exception e) {
				e.printStackTrace();
			}
		} else if (command.equals("/logout")) {
			Action action = new LogoutAction();
			try {
				forward = action.execute(request, response);
			} catch (Exception e) {
				e.printStackTrace();
			}
		} else if (command.equals("/myPage")) {
			Action action = new MyPageAction();
			try {
				forward = action.execute(request, response);
			} catch (Exception e) {
				e.printStackTrace();
			}
		} else if (command.equals("/detailMember")) {
			Action action = new DetailMemberAction();
			try {
				forward = action.execute(request, response);
			} catch (Exception e) {
				e.printStackTrace();
			}
		} else if (command.equals("/updateMemberForm")) {
			Action action = new UpdateMemberFormAction();
			try {
				forward = action.execute(request, response);
			} catch (Exception e) {
				e.printStackTrace();
			}
		} else if (command.equals("/updateMemberProc")) {
			Action action = new UpdateMemberProcAction();
			try {
				forward = action.execute(request, response);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		if (forward != null) {
			if (forward.isRedirect()) {
				// 리다이렉트
				response.sendRedirect(forward.getPath());
			} else {
				// 디스패치
				RequestDispatcher dispatcher = request.getRequestDispatcher(forward.getPath());
				dispatcher.forward(request, response);
			}
		}
	}

	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		doProcess(request, response);
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		doProcess(request, response);
	}

}
